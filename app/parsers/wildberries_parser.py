from app.parsers.base_parser import BaseParser
from typing import Optional, Dict
import re
import asyncio
import requests
import traceback


class WildberriesParser(BaseParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è Wildberries"""

    def is_supported(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É URL"""
        return "wildberries.ru" in url or "wb.ru" in url

    def parse_price(self, url: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —Å Wildberries"""
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ URL: {url}")

        soup = self.get_page(url)
        if not soup:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            return None

        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö")

        try:
            # –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            name = "–¢–æ–≤–∞—Ä Wildberries"
            name_selectors = [
                'h1[data-testid="product-title"]',
                ".product-page__title",
                "h1",
                ".goods-name",
            ]

            print("üîç –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
            for selector in name_selectors:
                name_element = soup.select_one(selector)
                print(f"  –°–µ–ª–µ–∫—Ç–æ—Ä {selector}: {name_element is not None}")
                if name_element:
                    name = name_element.get_text(strip=True)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name}")
                    break

            # –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã
            price = None
            price_selectors = [
                ".price-block__final-price",
                ".product-page__price-current",
                '[data-testid="price-current"]',
                ".price",
            ]

            print("üîç –ò—â–µ–º —Ü–µ–Ω—É...")
            for selector in price_selectors:
                price_element = soup.select_one(selector)
                print(f"  –°–µ–ª–µ–∫—Ç–æ—Ä {selector}: {price_element is not None}")
                if price_element:
                    price_text = price_element.get_text(strip=True)
                    print(f"  –¢–µ–∫—Å—Ç —Ü–µ–Ω—ã: '{price_text}'")
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞
                    price_match = re.search(
                        r"(\d+(?:\s*\d+)*)",
                        price_text.replace(" ", "").replace("‚ÇΩ", ""),
                    )
                    if price_match:
                        price = float(price_match.group(1))
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: {price}")
                        break

            if price is None:
                print("‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                print("üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
                print(soup.get_text()[:500])
                return None

            result = {"name": name, "price": price, "available": True, "url": url}
            print(f"üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return result

        except (AttributeError, ValueError, TypeError, KeyError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WB: {e}")
            print(traceback.format_exc())
            return None
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ WB: {e}")
            return None

    async def parse(self, url: str) -> Optional[Dict]:
        """Async –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(None, self.parse_price, url)
            return result
        except (RuntimeError, asyncio.TimeoutError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è async –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None

import requests
from bs4 import BeautifulSoup
from abc import ABC, abstractmethod
import time
import random
from typing import Optional, Dict


class BaseParser(ABC):
    def __init__(self):  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ init, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å __init__
        self.session = requests.Session()
        self.session.headers.update(
            {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                "Accept-Language": "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3",
                "Accept-Encoding": "gzip, deflate, br",
                "DNT": "1",
                "Connection": "keep-alive",
                "Upgrade-Insecure-Requests": "1",
            }
        )

    def get_page(self, url: str) -> Optional[BeautifulSoup]:
        """–ü–æ–ª—É—á–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        try:
            print(f"üåê –ó–∞–ø—Ä–æ—Å –∫: {url}")

            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            delay = random.uniform(1, 3)
            print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {delay:.1f}—Å")
            time.sleep(delay)

            response = self.session.get(url, timeout=15)
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")

            if response.status_code == 200:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return BeautifulSoup(response.content, "html.parser")
            elif response.status_code in [403, 429, 498]:
                print(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å {response.status_code})")
                return None
            else:
                response.raise_for_status()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {e}")
            return None

    @abstractmethod
    def parse_price(self, url: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
        pass

    @abstractmethod
    def is_supported(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–π URL"""
        pass

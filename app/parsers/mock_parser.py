import random
from typing import Optional, Dict
from .base_parser import BaseParser

class MockParser(BaseParser):
    """–ü–∞—Ä—Å–µ—Ä-—ç–º—É–ª—è—Ç–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        super().__init__()
        self.mock_products = {
            "iphone15": {
                "title": "iPhone 15 128GB –ß–µ—Ä–Ω—ã–π",
                "base_price": 89990,
                "store": "DNS"
            },
            "macbook": {
                "title": "MacBook Air 13 M2",
                "base_price": 134990,
                "store": "DNS" 
            },
            "airpods": {
                "title": "AirPods Pro 2-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è",
                "base_price": 24990,
                "store": "DNS"
            }
        }
    
    def is_supported(self, url: str) -> bool:
        return any(product in url.lower() for product in self.mock_products.keys())
    
    def parse_price(self, url: str) -> Optional[Dict]:
        """–≠–º—É–ª–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            print(f"üîç –≠–º—É–ª–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {url}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä –ø–æ URL
            product_key = None
            for key in self.mock_products.keys():
                if key in url.lower():
                    product_key = key
                    break
            
            if not product_key:
                return None
            
            product = self.mock_products[product_key]
            
            # –≠–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (¬±10%)
            price_variation = random.uniform(-0.1, 0.1)
            current_price = product["base_price"] * (1 + price_variation)
            current_price = round(current_price, -1)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–µ—Å—è—Ç–∫–æ–≤
            
            # –≠–º—É–ª–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (95% –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∞–ª–∏—á–∏–∏)
            is_available = random.random() > 0.05
            
            return {
                'price': current_price,
                'is_available': is_available,
                'title': product['title']
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–º—É–ª—è—Ü–∏–∏: {e}")
            return None
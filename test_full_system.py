from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.models import Store, Product, PriceHistory
from app.parsers.parser_manager import ParserManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
engine = create_engine('sqlite:///./price_monitor.db')
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def test_full_system():
    db = SessionLocal()
    manager = ParserManager()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
        store = Store(name="Mock Store", url="https://mock-store.com")
        db.add(store)
        db.commit()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        products_data = [
            {
                "name": "iPhone 15 128GB", 
                "url": "https://mock-store.com/iphone15-128gb-black",
                "target_price": 80000.0
            },
            {
                "name": "MacBook Air M2", 
                "url": "https://mock-store.com/macbook-air-m2",
                "target_price": 120000.0
            }
        ]
        
        print("üè™ –°–æ–∑–¥–∞–Ω –º–∞–≥–∞–∑–∏–Ω:", store.name)
        print("=" * 60)
        
        for product_data in products_data:
            # –ü–∞—Ä—Å–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            price_info = manager.parse_price(product_data["url"])
            
            if price_info:
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                product = Product(
                    name=product_data["name"],
                    url=product_data["url"],
                    store_id=store.id,
                    current_price=price_info["price"],
                    target_price=product_data["target_price"]
                )
                db.add(product)
                db.commit()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                history = PriceHistory(
                    product_id=product.id,
                    price=price_info["price"],
                    is_available=price_info["is_available"]
                )
                db.add(history)
                db.commit()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã
                price_dropped = price_info["price"] <= product_data["target_price"]
                status = "üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!" if price_dropped else "‚è≥ –ñ–¥–µ–º —Å–Ω–∏–∂–µ–Ω–∏—è"
                
                print(f"üì± {product.name}")
                print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price_info['price']:,.0f}‚ÇΩ")
                print(f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {product.target_price:,.0f}‚ÇΩ")
                print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
                print(f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {'–î–∞' if price_info['is_available'] else '–ù–µ—Ç'}")
                print("-" * 60)
        
        print("‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    test_full_system()